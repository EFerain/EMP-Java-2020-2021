Index: EPM-core/src/test/java/be/heh/epm/application/services/TestAddEmployee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package be.heh.epm.application.services;\r\n\r\nimport java.time.LocalDate;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport be.heh.epm.domain.Employee;\r\nimport be.heh.epm.domain.MonthlyPaymentSchedule;\r\nimport be.heh.epm.domain.PayCheck;\r\nimport be.heh.epm.domain.PaymentMethod;\r\nimport be.heh.epm.domain.PaymentSchedule;\r\n\r\npublic class TestAddEmployee\r\n{\r\n    private Employee employee;\r\n    private PayCheck pc;\r\n\r\n    // ======== Before ========\r\n    @Before\r\n    public void setUp() throws Exception\r\n    {\r\n        employee = new Employee(100, \"toto\", \"av maistriau\", \"toto@gmail.com\");\r\n        LocalDate payDate = LocalDate.of(2019, 10, 2);\r\n        pc = new PayCheck(payDate);\r\n    }\r\n\r\n    // ======== Test ========\r\n    // ==== Add Hourly Employee (Hourly + Weekly) ====\r\n    @Test\r\n    public void addHourlyEmployee()\r\n    {\r\n        \r\n    }\r\n\r\n    // ==== Add Salaried Employee (Salaried + Monthly) ====\r\n    @Test\r\n    public void addSalariedEmployee()\r\n    {\r\n        \r\n    }\r\n\r\n    // ==== Add Commission Employee (Commission + TwoWeek) ====\r\n    @Test\r\n    public void addCommissionEmployee()\r\n    {\r\n        \r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- EPM-core/src/test/java/be/heh/epm/application/services/TestAddEmployee.java	(revision 233c7be80dc58693d6f6008eb55e9a4caff9d06b)
+++ EPM-core/src/test/java/be/heh/epm/application/services/TestAddEmployee.java	(date 1606118847095)
@@ -30,20 +30,20 @@
     @Test
     public void addHourlyEmployee()
     {
-        
+
     }
 
     // ==== Add Salaried Employee (Salaried + Monthly) ====
     @Test
     public void addSalariedEmployee()
     {
-        
+
     }
 
     // ==== Add Commission Employee (Commission + TwoWeek) ====
     @Test
     public void addCommissionEmployee()
     {
-        
+
     }
-}
+}
\ No newline at end of file
Index: EPM-core/src/test/java/be/heh/epm/domain/TestEmployee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package be.heh.epm.domain;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport java.time.LocalDate;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\npublic class TestEmployee {\r\n\r\n    private Employee employee;\r\n    private PayCheck pc;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        employee = new Employee(100, \"toto\", \"av maistriau\", \"toto@gmail.com\");\r\n        LocalDate payDate = LocalDate.of(2019, 10, 2);\r\n        pc = new PayCheck(payDate);\r\n    }\r\n\r\n    @Test\r\n    public void createSalariedEmployee() {\r\n\r\n        employee.setPayClassification(new SalariedClassification(1000));\r\n        employee.setPayMethod(new DirectDepositMethod(\"ING\", \"be80-4444-444\"));\r\n        employee.setPaySchedule(new MonthlyPaymentSchedule());\r\n\r\n        employee.payDay(pc);\r\n        double pay = pc.getSalary();\r\n        assertEquals(1000, pay, 0.01);\r\n\r\n        PaymentSchedule ps = employee.getPaySchedule();\r\n        assertTrue(ps instanceof MonthlyPaymentSchedule);\r\n\r\n        PaymentMethod pm = employee.getPayMethod();\r\n        assertEquals(\"direct deposit into ING : be80-4444-444\", pm.toString());\r\n\r\n    }\r\n\r\n    @Test\r\n    public void createHourlyEmployee() {\r\n\r\n        employee.setPayClassification(new HourlyClassification(20.0));\r\n        employee.setPayMethod(new MailMethod(employee.getMail()));\r\n        employee.setPaySchedule(new WeeklyPaymentSchedule());\r\n\r\n        LocalDate date = LocalDate.of(2019, 10, 1);\r\n        LocalDate nextDate = LocalDate.of(2019, 10, 2);\r\n        LocalDate dateOutside = LocalDate.of(2019, 9, 2);\r\n\r\n        PaymentClassification classification = employee.getPayClassification();\r\n        ((HourlyClassification) classification).addTimeCard(new TimeCard(date, 8.0));\r\n        ((HourlyClassification) classification).addTimeCard(new TimeCard(nextDate, 10.0));\r\n        ((HourlyClassification) classification).addTimeCard(new TimeCard(dateOutside, 8.0));\r\n\r\n        employee.payDay(pc);\r\n        double pay = pc.getSalary();\r\n\r\n        assertEquals(380.0, pay, 0.01);\r\n\r\n        PaymentSchedule ps = employee.getPaySchedule();\r\n        assertTrue(ps instanceof WeeklyPaymentSchedule);\r\n\r\n        PaymentMethod pm = employee.getPayMethod();\r\n        assertEquals(\"mail : toto@gmail.com\", pm.toString());\r\n\r\n    }\r\n\r\n    @Test\r\n    public void monthlyPaymentSchedule() {\r\n        employee.setPayClassification(new SalariedClassification(1000));\r\n        employee.setPayMethod(new DirectDepositMethod(\"ING\", \"be80-4444-444\"));\r\n        employee.setPaySchedule(new MonthlyPaymentSchedule());\r\n\r\n        LocalDate LastDayOfMonth = LocalDate.of(2019, 10, 31);\r\n\r\n        assertTrue(employee.isDatePay(LastDayOfMonth));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void monthlyPaymentScheduleWrong() {\r\n        employee.setPayClassification(new SalariedClassification(1000));\r\n        employee.setPayMethod(new DirectDepositMethod(\"ING\", \"be80-4444-444\"));\r\n        employee.setPaySchedule(new MonthlyPaymentSchedule());\r\n\r\n        LocalDate firstDayOfMonthWrong = LocalDate.of(2019, 10, 1);\r\n\r\n        assertFalse(employee.isDatePay(firstDayOfMonthWrong));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void weeklyPaymentSchedule() {\r\n        employee.setPayClassification(new SalariedClassification(1000));\r\n        employee.setPayMethod(new DirectDepositMethod(\"ING\", \"be80-4444-444\"));\r\n        employee.setPaySchedule(new WeeklyPaymentSchedule());\r\n\r\n        LocalDate fridayDate = LocalDate.of(2020, 10, 2);\r\n\r\n        assertTrue(employee.isDatePay(fridayDate));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void weeklyPaymentScheduleWrong() {\r\n        employee.setPayClassification(new SalariedClassification(1000));\r\n        employee.setPayMethod(new DirectDepositMethod(\"ING\", \"be80-4444-444\"));\r\n        employee.setPaySchedule(new WeeklyPaymentSchedule());\r\n\r\n        LocalDate MondayDate = LocalDate.of(2020, 10, 5);\r\n\r\n        assertFalse(employee.isDatePay(MondayDate));\r\n\r\n    }\r\n\r\n    // ======== Commission ========\r\n    @Test\r\n    public void createCommissionEmployee()\r\n    {\r\n        employee.setPayClassification(new CommissionClassification(1000, 10));\r\n        employee.setPayMethod(new CashMethod());\r\n        employee.setPaySchedule(new TwoWeekPaySchedule());\r\n\r\n        LocalDate date = LocalDate.of(2019,10,1);\r\n        LocalDate nextDate = LocalDate.of(2019,10,2);\r\n\r\n        PaymentClassification classification = employee.getPayClassification();\r\n        ((CommissionClassification)classification).addSalesReceipt(new SalesReceipt(date, 2000));\r\n        ((CommissionClassification)classification).addSalesReceipt(new SalesReceipt(nextDate, 1500));\r\n\r\n        employee.payDay(pc);\r\n        double pay = pc.getSalary();\r\n\r\n        assertEquals(1350, pay, 0.01);\r\n\r\n        PaymentSchedule ps = employee.getPaySchedule();\r\n        assertTrue(ps instanceof TwoWeekPaySchedule);\r\n\r\n        PaymentMethod pm = employee.getPayMethod();\r\n        assertEquals(\"cash\", pm.toString());\r\n    }\r\n\r\n    @Test\r\n    public void alacon()\r\n    {\r\n        LocalDate date = LocalDate.of(2020, 10, 2);\r\n        LocalDate date1 = LocalDate.of(2020, 10, 9);\r\n        LocalDate date2 = LocalDate.of(2020, 10, 16);\r\n        LocalDate date3 = LocalDate.of(2020, 10, 23);\r\n        LocalDate date4 = LocalDate.of(2020, 10, 30);\r\n        LocalDate date5 = LocalDate.of(2020, 11, 6);\r\n        LocalDate date6 = LocalDate.of(2020, 11, 13);\r\n        LocalDate date7 = LocalDate.of(2020, 11, 20);\r\n        LocalDate date8 = LocalDate.of(2020, 11, 27);\r\n        LocalDate date9 = LocalDate.of(2020, 12, 4);\r\n        LocalDate date10 = LocalDate.of(2020, 10, 1);\r\n\r\n        TwoWeekPaySchedule bidule = new TwoWeekPaySchedule();\r\n\r\n        assertTrue(!bidule.isDatePay(date));\r\n        assertTrue(bidule.isDatePay(date1));\r\n        assertTrue(!bidule.isDatePay(date2));\r\n        assertTrue(bidule.isDatePay(date3));\r\n        assertTrue(!bidule.isDatePay(date4));\r\n        assertTrue(bidule.isDatePay(date5));\r\n        assertTrue(!bidule.isDatePay(date6));\r\n        assertTrue(bidule.isDatePay(date7));\r\n        assertTrue(!bidule.isDatePay(date8));\r\n        assertTrue(!bidule.isDatePay(date9));\r\n        assertTrue(!bidule.isDatePay(date10));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- EPM-core/src/test/java/be/heh/epm/domain/TestEmployee.java	(revision 233c7be80dc58693d6f6008eb55e9a4caff9d06b)
+++ EPM-core/src/test/java/be/heh/epm/domain/TestEmployee.java	(date 1605011719734)
@@ -171,4 +171,4 @@
         assertTrue(!bidule.isDatePay(date9));
         assertTrue(!bidule.isDatePay(date10));
     }
-}
+}
\ No newline at end of file
Index: EPM-core/src/main/java/be/heh/epm/domain/CommissionClassification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package be.heh.epm.domain;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.temporal.TemporalField;\r\nimport java.time.temporal.WeekFields;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class CommissionClassification implements PaymentClassification\r\n{\r\n    // ======== Attributes ========\r\n    private double amount;\r\n    private double commissionRate;\r\n    private List<SalesReceipt> listSalesReceipt = new ArrayList<SalesReceipt>();\r\n\r\n    // ======== Constructor ========\r\n    public CommissionClassification(double amount, double commissionRate)\r\n    {\r\n        this.amount = amount;\r\n        this.commissionRate = commissionRate;\r\n    }\r\n\r\n    // ======== Methods ========\r\n    // ==== calculatePay ====\r\n    @Override\r\n    public double calculatePay(PayCheck pc)\r\n    {\r\n        double money = this.amount;\r\n        LocalDate latestDate;\r\n\r\n        if(!this.listSalesReceipt.isEmpty())\r\n        {\r\n            latestDate = this.listSalesReceipt.get(0).getDate();\r\n\r\n            //Last time Employee worked\r\n            for(SalesReceipt salesReceipt : this.listSalesReceipt)\r\n            {\r\n                if(latestDate.isBefore(salesReceipt.getDate()))\r\n                {\r\n                    latestDate = salesReceipt.getDate();\r\n                }\r\n            }\r\n\r\n            for(SalesReceipt salesReceipt : this.listSalesReceipt)\r\n            {\r\n                TemporalField woy = WeekFields.of(Locale.getDefault()).weekOfWeekBasedYear();\r\n\r\n                if(latestDate.getYear() == salesReceipt.getDate().getYear() && \r\n                ((latestDate.get(woy) % 2 == 1 && latestDate.get(woy) - salesReceipt.getDate().get(woy) < 2)\r\n                || (latestDate.get(woy) % 2 == 0 && latestDate.get(woy) == salesReceipt.getDate().get(woy))))\r\n                {\r\n                    money += salesReceipt.getSalesAmount() / 100 * commissionRate;\r\n                }\r\n            }\r\n        }\r\n\r\n        return money;\r\n    }\r\n\r\n    // ==== addSalesReceipt ====\r\n    public void addSalesReceipt(SalesReceipt sr)\r\n    {\r\n        this.listSalesReceipt.add(sr);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- EPM-core/src/main/java/be/heh/epm/domain/CommissionClassification.java	(revision 233c7be80dc58693d6f6008eb55e9a4caff9d06b)
+++ EPM-core/src/main/java/be/heh/epm/domain/CommissionClassification.java	(date 1605011434088)
@@ -46,9 +46,9 @@
             {
                 TemporalField woy = WeekFields.of(Locale.getDefault()).weekOfWeekBasedYear();
 
-                if(latestDate.getYear() == salesReceipt.getDate().getYear() && 
-                ((latestDate.get(woy) % 2 == 1 && latestDate.get(woy) - salesReceipt.getDate().get(woy) < 2)
-                || (latestDate.get(woy) % 2 == 0 && latestDate.get(woy) == salesReceipt.getDate().get(woy))))
+                if(latestDate.getYear() == salesReceipt.getDate().getYear() &&
+                        ((latestDate.get(woy) % 2 == 1 && latestDate.get(woy) - salesReceipt.getDate().get(woy) < 2)
+                                || (latestDate.get(woy) % 2 == 0 && latestDate.get(woy) == salesReceipt.getDate().get(woy))))
                 {
                     money += salesReceipt.getSalesAmount() / 100 * commissionRate;
                 }
